//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `MusicManager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package org.example.MusicManager;

public class Music implements java.lang.Cloneable,
                              java.io.Serializable
{
    public String title;

    public String artist;

    public String path;

    public Music()
    {
        this.title = "";
        this.artist = "";
        this.path = "";
    }

    public String getTitle() {
        return title;
    }

    public String getArtist() {
        return artist;
    }

    public String getPath() {
        return path;
    }

    @Override
    public String toString() {
        return "Music{" +
                "title='" + title + '\'' +
                ", artist='" + artist + '\'' +
                ", path='" + path + '\'' +
                '}';
    }

    public Music(String title, String artist, String path)
    {
        this.title = title;
        this.artist = artist;
        this.path = path;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Music r = null;
        if(rhs instanceof Music)
        {
            r = (Music)rhs;
        }

        if(r != null)
        {
            if(this.title != r.title)
            {
                if(this.title == null || r.title == null || !this.title.equals(r.title))
                {
                    return false;
                }
            }
            if(this.artist != r.artist)
            {
                if(this.artist == null || r.artist == null || !this.artist.equals(r.artist))
                {
                    return false;
                }
            }
            if(this.path != r.path)
            {
                if(this.path == null || r.path == null || !this.path.equals(r.path))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::MusicManager::Music");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, title);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, artist);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, path);
        return h_;
    }

    public Music clone()
    {
        Music c = null;
        try
        {
            c = (Music)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.title);
        ostr.writeString(this.artist);
        ostr.writeString(this.path);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.title = istr.readString();
        this.artist = istr.readString();
        this.path = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Music v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Music ice_read(com.zeroc.Ice.InputStream istr)
    {
        Music v = new Music();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Music> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Music v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Music> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Music.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Music _nullMarshalValue = new Music();

    /** @hidden */
    public static final long serialVersionUID = -1633270597L;
}
